function ServerConnection() {
	this.ajaxPayload = null;
	this.successHandlesrMethod = null;
	this.failureHandlesrMethod = null;

	this.buildAjaxPayload = function (options) {
		//builds the requried paylod to make ajax call
		console.log('inside send Request Method');
		//get this url from the api calllist based on command/key
		var urlDetails = buildUrl(options.command);
		var url = urlDetails.url;
		var type = urlDetails.type;
		var timeout = urlDetails.timeout;
		var data = {
			'data': options.data,
			'client': {
				sid: Cookie.getCookie('DivamiKenseoSID')
			}
		};
		this.ajaxPayload = {
			url: url,
			type: type,
			data: data,
			dataType: 'json',
			success: function success(response) {},
			error: 'defaultFailureHandler',
			contentType: 'application/json',
			cache: false,
			timeout: timeout
		};
	};

	this.send = function () {
		//AJAX call is made here
		$.ajax(this.ajaxPayload);
	};

	this.setSuccessHandler = function (method) {
		//USER DEFINED SUCCESS CALLBACK
		this.successHandlesrMethod = method;
	};

	this.setErrorHandler = function (method) {
		//USER DEFINED FAILURE CALLBACK
		this.failureHandlesrMethod = method;
	};

	var defaultSuccessHandler = function defaultSuccessHandler(response) {
		//handles when we get response from server
		response = JSON.parse(response);
		if (this.successHandlesrMethod != null) {
			this.successHandlesrMethod(response);
		}
	};

	var defaultFailureHandler = function defaultFailureHandler() {
		//handles when the call failed to reach the server like error 500
		if (this.failureHandlesrMethod != null) {
			this.failureHandlesrMethod(response);
		}
	};

	var buildUrl = function buildUrl(key) {
		var serverPath = 'http://localhost/kenseo/server';
		var call = {
			url: serverPath + '/' + APIList[key][0],
			type: APIList[key][1],
			timeout: APIList[key][1]
		};
		return call;
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2JhYmVsLWFwcC9jb21tb24vU2VydmVyQ29tbXVuaWNhdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLGdCQUFnQixHQUFHO0FBQzNCLEtBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLEtBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7QUFDbEMsS0FBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQzs7QUFFbEMsS0FBSSxDQUFDLGdCQUFnQixHQUFHLFVBQVUsT0FBTyxFQUFFOztBQUUxQyxTQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDOztBQUFDLEFBRTFDLE1BQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDM0MsTUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQztBQUN6QixNQUFJLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO0FBQzNCLE1BQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUM7QUFDakMsTUFBSSxJQUFJLEdBQUc7QUFDVixTQUFNLEVBQUUsT0FBTyxDQUFDLElBQUk7QUFDcEIsV0FBUSxFQUFFO0FBQ1QsT0FBRyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUM7SUFDeEM7R0FDRCxDQUFDO0FBQ0YsTUFBSSxDQUFDLFdBQVcsR0FBRztBQUNsQixNQUFHLEVBQUUsR0FBRztBQUNSLE9BQUksRUFBRSxJQUFJO0FBQ1YsT0FBSSxFQUFFLElBQUk7QUFDVixXQUFRLEVBQUUsTUFBTTtBQUNoQixVQUFPLEVBQUUsU0FBUyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUU7QUFDdEMsUUFBSyxFQUFFLHVCQUF1QjtBQUM5QixjQUFXLEVBQUUsa0JBQWtCO0FBQy9CLFFBQUssRUFBRSxLQUFLO0FBQ1osVUFBTyxFQUFFLE9BQU87R0FDaEIsQ0FBQztFQUNGLENBQUM7O0FBRUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZOztBQUV2QixHQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztFQUN6QixDQUFDOztBQUVGLEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxVQUFVLE1BQU0sRUFBRTs7QUFFMUMsTUFBSSxDQUFDLHFCQUFxQixHQUFHLE1BQU0sQ0FBQztFQUNwQyxDQUFDOztBQUVGLEtBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxNQUFNLEVBQUU7O0FBRXhDLE1BQUksQ0FBQyxxQkFBcUIsR0FBRyxNQUFNLENBQUM7RUFDcEMsQ0FBQzs7QUFFRixLQUFJLHFCQUFxQixHQUFHLFNBQVMscUJBQXFCLENBQUMsUUFBUSxFQUFFOztBQUVwRSxVQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNoQyxNQUFJLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLEVBQUU7QUFDdkMsT0FBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ3JDO0VBQ0QsQ0FBQzs7QUFFRixLQUFJLHFCQUFxQixHQUFHLFNBQVMscUJBQXFCLEdBQUc7O0FBRTVELE1BQUksSUFBSSxDQUFDLHFCQUFxQixJQUFJLElBQUksRUFBRTtBQUN2QyxPQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDckM7RUFDRCxDQUFDOztBQUVGLEtBQUksUUFBUSxHQUFHLFNBQVMsUUFBUSxDQUFDLEdBQUcsRUFBRTtBQUNyQyxNQUFJLFVBQVUsR0FBRyxnQ0FBZ0MsQ0FBQztBQUNsRCxNQUFJLElBQUksR0FBRztBQUNWLE1BQUcsRUFBRSxVQUFVLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkMsT0FBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckIsVUFBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDeEIsQ0FBQztBQUNGLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQztDQUNGIiwiZmlsZSI6IlNlcnZlckNvbW11bmljYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBTZXJ2ZXJDb25uZWN0aW9uKCkge1xuXHR0aGlzLmFqYXhQYXlsb2FkID0gbnVsbDtcblx0dGhpcy5zdWNjZXNzSGFuZGxlc3JNZXRob2QgPSBudWxsO1xuXHR0aGlzLmZhaWx1cmVIYW5kbGVzck1ldGhvZCA9IG51bGw7XG5cblx0dGhpcy5idWlsZEFqYXhQYXlsb2FkID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0XHQvL2J1aWxkcyB0aGUgcmVxdXJpZWQgcGF5bG9kIHRvIG1ha2UgYWpheCBjYWxsXG5cdFx0Y29uc29sZS5sb2coJ2luc2lkZSBzZW5kIFJlcXVlc3QgTWV0aG9kJyk7XG5cdFx0Ly9nZXQgdGhpcyB1cmwgZnJvbSB0aGUgYXBpIGNhbGxsaXN0IGJhc2VkIG9uIGNvbW1hbmQva2V5XG5cdFx0dmFyIHVybERldGFpbHMgPSBidWlsZFVybChvcHRpb25zLmNvbW1hbmQpO1xuXHRcdHZhciB1cmwgPSB1cmxEZXRhaWxzLnVybDtcblx0XHR2YXIgdHlwZSA9IHVybERldGFpbHMudHlwZTtcblx0XHR2YXIgdGltZW91dCA9IHVybERldGFpbHMudGltZW91dDtcblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdCdkYXRhJzogb3B0aW9ucy5kYXRhLFxuXHRcdFx0J2NsaWVudCc6IHtcblx0XHRcdFx0c2lkOiBDb29raWUuZ2V0Q29va2llKCdEaXZhbWlLZW5zZW9TSUQnKVxuXHRcdFx0fVxuXHRcdH07XG5cdFx0dGhpcy5hamF4UGF5bG9hZCA9IHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxuXHRcdFx0c3VjY2VzczogZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge30sXG5cdFx0XHRlcnJvcjogJ2RlZmF1bHRGYWlsdXJlSGFuZGxlcicsXG5cdFx0XHRjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuXHRcdFx0Y2FjaGU6IGZhbHNlLFxuXHRcdFx0dGltZW91dDogdGltZW91dFxuXHRcdH07XG5cdH07XG5cblx0dGhpcy5zZW5kID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vQUpBWCBjYWxsIGlzIG1hZGUgaGVyZVxuXHRcdCQuYWpheCh0aGlzLmFqYXhQYXlsb2FkKTtcblx0fTtcblxuXHR0aGlzLnNldFN1Y2Nlc3NIYW5kbGVyID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuXHRcdC8vVVNFUiBERUZJTkVEIFNVQ0NFU1MgQ0FMTEJBQ0tcblx0XHR0aGlzLnN1Y2Nlc3NIYW5kbGVzck1ldGhvZCA9IG1ldGhvZDtcblx0fTtcblxuXHR0aGlzLnNldEVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIChtZXRob2QpIHtcblx0XHQvL1VTRVIgREVGSU5FRCBGQUlMVVJFIENBTExCQUNLXG5cdFx0dGhpcy5mYWlsdXJlSGFuZGxlc3JNZXRob2QgPSBtZXRob2Q7XG5cdH07XG5cblx0dmFyIGRlZmF1bHRTdWNjZXNzSGFuZGxlciA9IGZ1bmN0aW9uIGRlZmF1bHRTdWNjZXNzSGFuZGxlcihyZXNwb25zZSkge1xuXHRcdC8vaGFuZGxlcyB3aGVuIHdlIGdldCByZXNwb25zZSBmcm9tIHNlcnZlclxuXHRcdHJlc3BvbnNlID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG5cdFx0aWYgKHRoaXMuc3VjY2Vzc0hhbmRsZXNyTWV0aG9kICE9IG51bGwpIHtcblx0XHRcdHRoaXMuc3VjY2Vzc0hhbmRsZXNyTWV0aG9kKHJlc3BvbnNlKTtcblx0XHR9XG5cdH07XG5cblx0dmFyIGRlZmF1bHRGYWlsdXJlSGFuZGxlciA9IGZ1bmN0aW9uIGRlZmF1bHRGYWlsdXJlSGFuZGxlcigpIHtcblx0XHQvL2hhbmRsZXMgd2hlbiB0aGUgY2FsbCBmYWlsZWQgdG8gcmVhY2ggdGhlIHNlcnZlciBsaWtlIGVycm9yIDUwMFxuXHRcdGlmICh0aGlzLmZhaWx1cmVIYW5kbGVzck1ldGhvZCAhPSBudWxsKSB7XG5cdFx0XHR0aGlzLmZhaWx1cmVIYW5kbGVzck1ldGhvZChyZXNwb25zZSk7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBidWlsZFVybCA9IGZ1bmN0aW9uIGJ1aWxkVXJsKGtleSkge1xuXHRcdHZhciBzZXJ2ZXJQYXRoID0gJ2h0dHA6Ly9sb2NhbGhvc3Qva2Vuc2VvL3NlcnZlcic7XG5cdFx0dmFyIGNhbGwgPSB7XG5cdFx0XHR1cmw6IHNlcnZlclBhdGggKyAnLycgKyBBUElMaXN0W2tleV1bMF0sXG5cdFx0XHR0eXBlOiBBUElMaXN0W2tleV1bMV0sXG5cdFx0XHR0aW1lb3V0OiBBUElMaXN0W2tleV1bMV1cblx0XHR9O1xuXHRcdHJldHVybiBjYWxsO1xuXHR9O1xufSJdfQ==
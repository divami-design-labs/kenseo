//Variables
$imgPath: "../../imgs/";

$fontSizeOne: 18px;

//mixins
@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}
	@-ms-keyframes #{$animation-name} {
		@content;
	}
	@keyframes #{$animation-name} {
		@content;
	}
}
@mixin border-radius($radius){
	-webkit-border-radius: $radius;
   	-moz-border-radius: $radius;
    -ms-border-radius: $radius;
    -o-border-radius: $radius;
    border-radius: $radius;
}

@mixin backgroundImage($icon){
	background-image: url($imgPath + $icon);
	background-repeat: no-repeat;
	background-size: 100% 100%;
}
@mixin dimensions($width, $height){
	width: $width;
	height: $height;
}
@mixin square($x){
	@include dimensions($x, $x);
}
@mixin elementWithBackground($icon, $w, $h){
	@include backgroundImage($icon);
	@include dimensions($w, $h);
}
@mixin transition($v){
	transition: $v;
	-webkit-transition: $v;
	-moz-transition: $v;
	-o-transition: $v;
	-ms-transition: $v;
}
@mixin transform($v){
	transform: $v;
	-webkit-transform: $v;
	-moz-transform: $v;
	-ms-transform: $v;
	-o-transform: $v;
}
@mixin translate($x, $y){
	@include transform(translate($x, $y));
}

@mixin verticalMiddle(){
	@include translate(0, -50%);
	position: absolute;
	top: 50%;
}
@mixin fixedCenter($w, $h){
	position: absolute;
	top: 50%;
	left: 50%;
	margin-left: -$w/2;
	margin-top: -$h/2;
	width: $w;
	height: $h;
}
@mixin fullMiddle(){
	@include translate(-50%, -50%);
	position: absolute;
	top: 50%;
	left: 50%;
}
@mixin listTypeImage($image){
	&::before{
		content: "";
		@include elementWithBackground($image, 15px, 15px);
		position: absolute;
		left:0;
		top: 2px;
	}
}
@mixin listImage($image, $w, $h){
	padding-left: $w + 22;
	position: relative;
	&::before{
		content: "";
		@include elementWithBackground($image, $w, $h);
		width: $w;
		height: $w;
		position: absolute;
		top: 50%;
		@include transform(translate(0, -50%));
		left: 10px;
	}
}
@mixin listTypeWithGap($image, $w, $h, $t, $l){
	&::before{
		content: "";
		@include elementWithBackground($image, $w, $h);
		position: absolute;
		top: $t;
		left:$l;
	}	
}
@mixin absoluter($t, $l, $r, $b){
	position: absolute;
	top: $t;
	left: $l;
	right: $r;
	bottom: $b;
}
@mixin text($fontSize, $color){
	font-size: $fontSize;
	color: $color;
}
@mixin placeHolder($color, $size, $family){
	@if $color == null  {$color: inherit}
	@if $size == null  {$size: inherit}
	@if $family == null  {$family: inherit}

	&::-webkit-input-placeholder {
	   color: $color;
	   font: $size;
	   font-family: $family;
	}

	&:-moz-placeholder { /* Firefox 18- */
	   color: $color;
	   font: $size;
	   font-family: $family;
	}

	&::-moz-placeholder {  /* Firefox 19+ */
	   color: $color;
	   font: $size;
	   font-family: $family;
	}

	&:-ms-input-placeholder {  
	   color: $color;
	   font: $size;
	   font-family: $family;
	}
}
@mixin popupDimensions($w, $h){
	//@include dimensions($w, $h);
	width: $w;
	max-height: $h;
	@media (max-height:#{$h}){
		&{
			max-height: auto;
		}
	}
}
//Close-icon
@mixin closeIcon($x){
	@include elementWithBackground('close.svg', $x, $x);
	@extend .hand;
}
.mg-parent{
	$border: 1px;
	margin: 0 $border;
	display: table;
	table-layout: fixed;
	.mg-holder{
		display: table-cell;
		vertical-align: top;
	}
	// For high specificity
	.mg-holder.mg-holder:last-child{
		width: 0px;
	}
}
@mixin middleSetter($x){
	width: calc(100% - #{$x});
	width: -webkit-calc(100% - #{$x});
	width: -moz-calc(100% - #{$x});
	margin-left: $x;
	.mg-holder > .mg-item{
		margin-left: -$x;
	}
}
//extends
.clearFloat{
	&::after{
		content: "";
		display: block;
		clear: both;
	}
}
.circle{
	@include border-radius(50%);
}
.fullMiddle{
	@include translate(-50%, -50%);
	position: absolute;
	top: 50%;
	left: 50%;
}
.squareFullMiddle{
	@include translate(-50%, -50%);
	margin-top: 50%;
	margin-left: 50%;
}
.stretch{
	position: absolute;
	left: 0;
	right: 0;
	top: 0;
	bottom: 0;
}
.ellipsis{
	overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}
.show{
	display: block;
}

.hide{
	display: none;
}
.disappear{
	visibility: hidden;
	position: absolute;
	pointer-events: none;
}
.a{
	text-decoration: none;
}
.hand{
	cursor: pointer;
}
.wrap{
	display: inline-block;
	&:after{
		content: "";
		display: block;
	}
}
.unselectable {
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: -moz-none;
    -o-user-select: none;
    user-select: none;
} 


//Checkbox

.checkbox {
    padding-left: 30px;
    position: relative;
    @extend .unselectable;
    @include text(14px, $colorTwo);
}
.checkbox:after, .checkbox > span:after {
    content:"";
    display: block;
    position: absolute;
    top: 50%;
    left: 0;
    cursor: pointer;
    @include transform(translate(0%, -50%));
}
.checkbox:after {
    @include square(18px);
    border: 1px solid #acacac;
    @include border-radius(2px);
}
.checkbox > input[type="checkbox"] {
    position: absolute;
    visibility: hidden;
    pointer-events: none;
}
:checked + span:after {
    width: 10px;
    height: 5px;
    left: 4px;
    @include transform(translate(0, -50%) rotate(-45deg));
    border-left: 2px solid #777;
    border-bottom: 2px solid #777;
    margin-top: -2px;
}
//Toggle
.toggle-checkbox {
    $h: 26px;
    display: block;
    @extend .unselectable;
    width: $h * 2;
    @include border-radius($h);
    position: relative;
    height: $h;
    background-color: $colorW;
    border: 1px solid $colorV;
    cursor: pointer;
    input[type="checkbox"] {
        position: absolute;
        visibility: hidden;
        pointer-events: none;
        & + span {
            display: block;
            width: $h;
            height: $h;
            left: 0;
            @include border-radius($h);
            background-color: $colorV;
            position: absolute;
            @include transition(all 0.1s ease-out);
        }
        &:checked + span {
            left: $h;
        }
    }
}
.unfocus{
	&:focus{
		outline: none;
	}
}
// Dropdown
.dropdown{
	width: 230px;
	height: 30px;
	padding: 5px;
	display: block;
	margin: 10px 0px;
	@extend .unfocus;
}
input[type=text]{
	@extend .unfocus;
}
